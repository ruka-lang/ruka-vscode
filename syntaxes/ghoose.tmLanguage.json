{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ghoose",
	"patterns": [
        {
            "include": "#comments"
        },
		{
			"include": "#keywords"
		},
        {
            "include": "#operators"
        },
        {
            "include": "#literals"
        },
		{
			"include": "#strings"
		}
	],
    "foldingStartMarker": "{s*$",
    "foldingEndMarker": "^s*}",
	"repository": {
        "comments": {
            "name": "comment.ghoose",
            "patterns": [
                { "include": "#comment-line" },
                { "include": "#comment-block-doc" },
                { "include": "#comment-block" }
            ]
        },
        "comment-line": {
            "name": "comment.line.double-slash.ghoose",
            "begin": "(^[ \\t]+)?((//))",
            "end": "(?=^)"
        },
        "comment-block": {
            "name": "comment.block.ghoose",
            "begin": "/\\*",
            "end": "\\*/",
            "patterns": [
                { "include": "#comment-block-doc" },
                { "include": "#comment-block" }
            ]
        },
        "comment-block-doc": {
            "name": "comment.block.documentation.ghoose",
            "begin": "/\\*\\*(?!/)",
            "end": "\\*/",
            "patterns": [
                { "include": "#comment-block-doc" },
                { "include": "#comment-block" }
            ]
        },
		"keywords": {
			"patterns": [{
				"name": "keyword.control.ghoose",
				"match": "\\b(if|match|while|for|return|fn|record|union|trait|module|defer|inline|break|continue|and|or|not|else|as|when|any|from|const|let|var|public|private|mut|mov|loc|comptime|static|in|use)\\b"
			}]
		},
        "operators": {
            "patterns": [
                { "include": "#operator-infix" },
                { "include": "#operator-prefix" }
            ]
        },
        "operators-infix": {
            "patterns": [
                { 
                    "name": "keyword.operator.ghoose",
                    "match": ";"
                },
                { "include": "#operator-infix-assign" }
            ]
        },
        "operator-infix-assign": {
            "name": "keyword.operator.ghoose",
            "match": "(?<![#\\-:!?.@*/&%^+<=>|~$\\\\])(=)(?![#\\-:!?.@*/&%^+<=>|~$\\\\])"
        },
        "literals": {
            "patterns": [
                { "include": "#literal-boolean" },
                { "include": "#literal-character" },
                { "include": "#literal-numeric" },
                { "include": "#literal-unit" }
            ]
        },
        "literal-boolean": {
            "name": "constant.language.ghoose constant.numeric.ghoose",
            "match": "\\b(false|true)\\b"
        },
        "literal-character": {
            "name": "constant.character.ghoose",
            "match": "(')([[:space:]]|[[:graph:]]|\\\\[\\\\\"'ntbr]|\\\\[[:digit:]][[:digit:]][[:digit:]]|\\\\x[[:xdigit:]][[:xdigit:]]|\\\\o[0-3][0-7][0-7])(')"
        },
        "literal-numeric": {
            "patterns": [
                {
                    "match": "([-])?([[:digit:]][_[:digit:]]*)(?:(\\.)([_[:digit:]]*))?(?:([eE])([\\-\\+])?([[:digit:]][_[:digit:]]*))?(?![bBoOxX])",
                    "captures": {
                        "1": { "name": "keyword.control.less" },
                        "2": { "name": "constant.numeric" },
                        "3": {
                            "name": "variable.other.class.js variable.interpolation keyword.operator keyword.control message.error"
                        },
                        "4": { "name": "constant.numeric" },
                        "5": { "name": "keyword.control.less" },
                        "6": { "name": "keyword.control.less" },
                        "7": { "name": "constant.numeric" }
                    }
                },
                {
                    "match": "([-])?(0[xX])([[:xdigit:]][_[:xdigit:]]*)(?:(\\.)([_[:xdigit:]]*))?(?:([pP])([\\-\\+])?([[:digit:]][_[:digit:]]*))?",
                    "captures": {
                        "1": { "name": "keyword.control.less" },
                        "2": { "name": "keyword.control.less" },
                        "3": { "name": "constant.numeric" },
                        "4": {
                            "name": "variable.other.class.js variable.interpolation keyword.operator keyword.control message.error"
                        },
                        "5": { "name": "constant.numeric" },
                        "6": { "name": "keyword.control.less" },
                        "7": { "name": "keyword.control.less" },
                        "8": { "name": "constant.numeric" }
                    }
                },
                {
                    "match": "([-])?(0[oO])([0-7][_0-7]*)",
                    "captures": {
                        "1": { "name": "keyword.control.less" },
                        "2": { "name": "keyword.control.less" },
                        "3": { "name": "constant.numeric" }
                    }
                },
                {
                    "match": "([-])?(0[bB])([0-1][_0-1]*)",
                    "captures": {
                        "1": { "name": "keyword.control.less" },
                        "2": { "name": "keyword.control.less" },
                        "3": { "name": "constant.numeric" }
                    }
                }
            ]
        },
        "literal-string": {

        },
        "literal-unit": {
            "name": "constant.language.unit.ghoose",
            "match": "\\(\\)"
        },
		"strings": {
			"name": "string.quoted.double.ghoose",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ghoose",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.ghoose"
}
